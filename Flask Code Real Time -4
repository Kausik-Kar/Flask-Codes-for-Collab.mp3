import spotipy
from spotipy.oauth2 import SpotifyOAuth
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from scipy.spatial import distance
import math
from flask import Flask, jsonify, request

app = Flask(__name__)

client_ID = "7f43ef2510664eb1bc313596b46800ca"
client_SECRET = "57cfb3ffb5d84ef7b922cc8c4a9181aa"
redirect_url = "http://localhost:9000"

sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=client_ID, 
                                               client_secret=client_SECRET,
                                               redirect_uri=redirect_url, 
                                               scope="user-read-playback-state", 
                                               open_browser=True))

data = pd.read_csv("data.csv")

class currently_playing:
    def __init__(self, results):
        self.results = results
        self.id = results['item']['id']
        self.time = results['item']['duration_ms']
        self.popularity = results['item']['popularity']
    
    def info(self):
        name = []
        print(f"Track name: {self.results['item']['album']['name']}")
        for artist in self.results["item"]["artists"]:
            name.append(artist['name'])
        print("Artists: ", end="")
        print(", ".join(name))
        print(f"Popularity: {self.popularity}")
        print(f"Release Date: {self.results['item']['album']['release_date']}")
    
    def artists(self):
        artist_ids = []
        for artist in self.results["item"]["artists"]:
            artist_ids.append(artist['id'])
        return artist_ids
    
    def track_name(self):
        return self.results['item']['album']['name']

def read_current_play(sp):
    try:
        results = sp.current_playback()
    except:
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=client_ID, 
                                                       client_secret=client_SECRET,
                                                       redirect_uri=redirect_url, 
                                                       scope="user-read-playback-state", 
                                                       open_browser=True)).current_playback()
        results = sp.current_playback()
    return currently_playing(results)

def get_features(play):
    df = pd.DataFrame(sp.audio_features(play.id))
    return df.drop(columns=['type', 'uri', 'track_href', 'analysis_url'])

A = []

def song_features(playing):
    global A
    play_df = get_features(playing)
    B = []
    B.append(play_df['acousticness'][0])
    B.append(play_df['energy'][0])
    A.append(B)

def plot_clus(X, Y, kmeans):
    plt.scatter(X[Y==0, 0], X[Y==0, 1], s=100, c='red', label ='Cluster 1')
    plt.scatter(X[Y==1, 0], X[Y==1, 1], s=100, c='green', label ='Cluster 2')
    plt.scatter(X[Y==2, 0], X[Y==2, 1], s=100, c='blue', label ='Cluster 3')
    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='yellow', label = 'Centroids')
    plt.title('Clusters of Songs')
    plt.xlabel('Acousticness')
    plt.ylabel('Energy')
    plt.legend()
    plt.show()

@app.route('/recommend', methods=['GET'])
def recommend():
    global A
    
    playing = read_current_play(sp)
    song_features(playing)
    X = A
    
    if len(X) < 2:
        return jsonify({'message': 'Please listen to at least two songs before requesting a recommendation.'})
    
    kmeans = KMeans(n_clusters=3, random_state=0).fit(X)
    y_kmeans = kmeans.predict(X)
    
    rec_cluster = (y_kmeans[-1] + 1) % 3
    cluster_songs = [i for i, cluster in enumerate(y_kmeans) if cluster == rec_cluster]
    
    distances = [distance.euclidean(X[-1], X[i]) for i in cluster_songs]
    rec_song_index = cluster_songs[distances.index(min(distances))]
    rec_song_id = data.iloc[rec_song_index]['id']
    
    rec_song_info = sp.track(rec_song_id)
    name = rec_song_info['name']
    artist = rec_song_info['artists'][0]['name']
    preview_url = rec_song_info['preview_url']
    
    A = A[:-1]
    
    return jsonify({
        'name': name,
        'artist': artist,
        'preview_url': preview_url
    })

